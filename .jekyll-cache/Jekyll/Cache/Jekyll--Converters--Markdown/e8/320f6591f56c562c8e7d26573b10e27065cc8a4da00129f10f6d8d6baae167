I"dc<h1 id="swiftui-navegación-y-the-composable-architecture-segunda-parte-sheets">SwiftUI, Navegación y The Composable Architecture. Segunda parte, sheets.</h1>

<p>En el <a href="https://agescura.github.io/composable-architecture-alerts.html">artículo anterior</a>., se habló de alerts y confirmationDialogs (los antiguos ActionSheets). En el, se tomó la decisión de utilizar la sobrecarga de las alertas y de los confirmation dialog, de la siguiente forma.</p>

<p>La signatura de una alerta es la siguiente:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">.</span><span class="nf">alert</span><span class="p">(</span>
    <span class="nv">route</span><span class="p">:</span> <span class="o">&lt;</span><span class="err">#</span><span class="kt">T</span><span class="err">##</span><span class="kt">Enum</span><span class="p">?</span><span class="err">#</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="nv">case</span><span class="p">:</span> <span class="o">&lt;</span><span class="err">#</span><span class="kt">T</span><span class="err">##</span><span class="kt">CasePath</span><span class="o">&lt;</span><span class="kt">Enum</span><span class="p">,</span> <span class="kt">Case</span><span class="o">&gt;</span><span class="err">#</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="nv">send</span><span class="p">:</span> <span class="o">&lt;</span><span class="err">#</span><span class="kt">T</span><span class="err">##</span><span class="p">(</span><span class="kt">Action</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="err">#</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="nv">onDismiss</span><span class="p">:</span> <span class="o">&lt;</span><span class="err">#</span><span class="kt">T</span><span class="err">##</span><span class="p">(()</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">)?</span><span class="err">#</span><span class="o">&gt;</span>
<span class="p">)</span>
</code></pre></div></div>

<p>La signatura de un confirmation dialog es la siguiente:</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">.</span><span class="nf">confirmationDialog</span><span class="p">(</span>
    <span class="nv">route</span><span class="p">:</span> <span class="o">&lt;</span><span class="err">#</span><span class="kt">T</span><span class="err">##</span><span class="kt">Enum</span><span class="p">?</span><span class="err">#</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="nv">case</span><span class="p">:</span> <span class="o">&lt;</span><span class="err">#</span><span class="kt">T</span><span class="err">##</span><span class="kt">CasePath</span><span class="o">&lt;</span><span class="kt">Enum</span><span class="p">,</span> <span class="kt">Case</span><span class="o">&gt;</span><span class="err">#</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="nv">titleVisibility</span><span class="p">:</span> <span class="o">&lt;</span><span class="err">#</span><span class="kt">T</span><span class="err">##</span><span class="kt">Visibility</span><span class="err">#</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="nv">send</span><span class="p">:</span> <span class="o">&lt;</span><span class="err">#</span><span class="kt">T</span><span class="err">##</span><span class="p">(</span><span class="kt">Action</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="err">#</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="nv">onDismiss</span><span class="p">:</span> <span class="o">&lt;</span><span class="err">#</span><span class="kt">T</span><span class="err">##</span><span class="p">(()</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">)?</span><span class="err">#</span><span class="o">&gt;</span>
<span class="p">)</span>
</code></pre></div></div>

<p>Y, en este artículo, lo que buscamos es una signatura para un sheet (y, también para su hermano gemelo, el popover para los iPads).</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">.</span><span class="nf">sheet</span><span class="p">(</span>
    <span class="nv">route</span><span class="p">:</span> <span class="o">&lt;</span><span class="err">#</span><span class="kt">T</span><span class="err">##</span><span class="kt">Enum</span><span class="p">?</span><span class="err">#</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="nv">case</span><span class="p">:</span> <span class="o">&lt;</span><span class="err">#</span><span class="kt">T</span><span class="err">##</span><span class="kt">CasePath</span><span class="o">&lt;</span><span class="kt">Enum</span><span class="p">,</span> <span class="kt">Case</span><span class="o">&gt;</span><span class="err">#</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="nv">onDismiss</span><span class="p">:</span> <span class="o">&lt;</span><span class="err">#</span><span class="kt">T</span><span class="err">##</span><span class="p">(()</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">)?</span><span class="err">#</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="nv">content</span><span class="p">:</span> <span class="o">&lt;</span><span class="err">#</span><span class="kt">T</span><span class="err">##</span><span class="p">(</span><span class="kt">Case</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Content</span><span class="err">#</span><span class="o">&gt;</span>
<span class="p">)</span>
</code></pre></div></div>

<h2 id="un-sheet-a-la-antigua">Un sheet a la antigua</h2>

<p>Empezamos nuestra investigación siguiendo los ejemplos en los casos de estudio que nos ofrece Composable Architecture.</p>

<p>Para ello, iremos rápido, crearemos un componente nuevo AddItem.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">AddItemState</span><span class="p">:</span> <span class="kt">Equatable</span><span class="p">,</span> <span class="kt">Identifiable</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">item</span><span class="p">:</span> <span class="kt">Item</span>
    
    <span class="k">var</span> <span class="nv">id</span><span class="p">:</span> <span class="kt">UUID</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">item</span><span class="o">.</span><span class="n">id</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">enum</span> <span class="kt">AddItemAction</span><span class="p">:</span> <span class="kt">Equatable</span> <span class="p">{</span>
    <span class="k">case</span> <span class="nf">change</span><span class="p">(</span><span class="nv">style</span><span class="p">:</span> <span class="kt">Style</span><span class="p">)</span>
    <span class="k">case</span> <span class="n">incrementButtonTapped</span>
    <span class="k">case</span> <span class="n">decrementButtonTapped</span>
    <span class="k">case</span> <span class="n">generateRandomValueButtonTapped</span>
    <span class="k">case</span> <span class="n">saveButtonTapped</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">AddItemEnvironment</span> <span class="p">{}</span>

<span class="k">let</span> <span class="nv">addItemReducer</span> <span class="o">=</span> <span class="kt">Reducer</span><span class="o">&lt;</span>
<span class="kt">AddItemState</span><span class="p">,</span>
<span class="kt">AddItemAction</span><span class="p">,</span>
<span class="kt">AddItemEnvironment</span>
<span class="o">&gt;</span> <span class="p">{</span> <span class="n">state</span><span class="p">,</span> <span class="n">action</span><span class="p">,</span> <span class="n">_</span> <span class="k">in</span>
    <span class="k">switch</span> <span class="n">action</span> <span class="p">{</span>
    <span class="k">case</span> <span class="kd">let</span> <span class="o">.</span><span class="nf">change</span><span class="p">(</span><span class="nv">style</span><span class="p">:</span> <span class="n">style</span><span class="p">):</span>
        <span class="n">state</span><span class="o">.</span><span class="n">item</span><span class="o">.</span><span class="n">style</span> <span class="o">=</span> <span class="n">style</span>
        <span class="k">return</span> <span class="o">.</span><span class="k">none</span>
        
    <span class="k">case</span> <span class="o">.</span><span class="nv">incrementButtonTapped</span><span class="p">:</span>
        <span class="n">state</span><span class="o">.</span><span class="n">item</span><span class="o">.</span><span class="n">value</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="o">.</span><span class="k">none</span>
        
    <span class="k">case</span> <span class="o">.</span><span class="nv">decrementButtonTapped</span><span class="p">:</span>
        <span class="n">state</span><span class="o">.</span><span class="n">item</span><span class="o">.</span><span class="n">value</span> <span class="o">-=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="o">.</span><span class="k">none</span>
        
    <span class="k">case</span> <span class="o">.</span><span class="nv">generateRandomValueButtonTapped</span><span class="p">:</span>
        <span class="n">state</span><span class="o">.</span><span class="n">item</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="kt">Int</span><span class="o">.</span><span class="nf">random</span><span class="p">(</span><span class="nv">in</span><span class="p">:</span> <span class="mi">0</span><span class="o">...</span><span class="mi">100</span><span class="p">)</span>
        <span class="k">return</span> <span class="o">.</span><span class="k">none</span>
        
    <span class="k">case</span> <span class="o">.</span><span class="nv">saveButtonTapped</span><span class="p">:</span>
        <span class="k">return</span> <span class="o">.</span><span class="k">none</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">AddItemView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">store</span><span class="p">:</span> <span class="kt">Store</span><span class="o">&lt;</span><span class="kt">AddItemState</span><span class="p">,</span> <span class="kt">AddItemAction</span><span class="o">&gt;</span>
    
    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">WithViewStore</span><span class="p">(</span><span class="k">self</span><span class="o">.</span><span class="n">store</span><span class="p">)</span> <span class="p">{</span> <span class="n">viewStore</span> <span class="k">in</span>
            <span class="kt">ZStack</span> <span class="p">{</span>
                <span class="n">viewStore</span><span class="o">.</span><span class="n">item</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">color</span><span class="o">.</span><span class="nf">edgesIgnoringSafeArea</span><span class="p">(</span><span class="o">.</span><span class="n">all</span><span class="p">)</span>
                
                <span class="kt">VStack</span><span class="p">(</span><span class="nv">spacing</span><span class="p">:</span> <span class="mi">16</span><span class="p">)</span> <span class="p">{</span>
                    <span class="kt">HStack</span><span class="p">(</span><span class="nv">spacing</span><span class="p">:</span> <span class="mi">16</span><span class="p">)</span> <span class="p">{</span>
                        <span class="kt">ForEach</span><span class="p">(</span><span class="kt">Style</span><span class="o">.</span><span class="n">allCases</span><span class="p">,</span> <span class="nv">id</span><span class="p">:</span> <span class="p">\</span><span class="o">.</span><span class="k">self</span><span class="p">)</span> <span class="p">{</span> <span class="n">style</span> <span class="k">in</span>
                            <span class="kt">Button</span><span class="p">(</span>
                                <span class="nv">action</span><span class="p">:</span> <span class="p">{</span> <span class="n">viewStore</span><span class="o">.</span><span class="nf">send</span><span class="p">(</span><span class="o">.</span><span class="nf">change</span><span class="p">(</span><span class="nv">style</span><span class="p">:</span> <span class="n">style</span><span class="p">))</span> <span class="p">},</span>
                                <span class="nv">label</span><span class="p">:</span> <span class="p">{</span>
                                    <span class="kt">Text</span><span class="p">(</span><span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="s">"</span><span class="se">\(</span><span class="n">style</span><span class="se">)</span><span class="s">"</span><span class="p">))</span>
                                        <span class="o">.</span><span class="nf">minimumScaleFactor</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
                                        <span class="o">.</span><span class="nf">lineLimit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
                                        <span class="o">.</span><span class="nf">whiteBox</span><span class="p">()</span>
                                <span class="p">}</span>
                            <span class="p">)</span>
                        <span class="p">}</span>
                    <span class="p">}</span>
                    <span class="kt">HStack</span> <span class="p">{</span>
                        <span class="kt">Button</span><span class="p">(</span>
                            <span class="nv">action</span><span class="p">:</span> <span class="p">{</span> <span class="n">viewStore</span><span class="o">.</span><span class="nf">send</span><span class="p">(</span><span class="o">.</span><span class="n">decrementButtonTapped</span><span class="p">)</span> <span class="p">},</span>
                            <span class="nv">label</span><span class="p">:</span> <span class="p">{</span>
                                <span class="kt">Text</span><span class="p">(</span><span class="s">"-"</span><span class="p">)</span>
                                    <span class="o">.</span><span class="nf">whiteBox</span><span class="p">()</span>
                            <span class="p">}</span>
                        <span class="p">)</span>
                        <span class="kt">Text</span><span class="p">(</span><span class="s">"</span><span class="se">\(</span><span class="n">viewStore</span><span class="o">.</span><span class="n">item</span><span class="o">.</span><span class="n">value</span><span class="se">)</span><span class="s">"</span><span class="p">)</span>
                            <span class="o">.</span><span class="nf">whiteBox</span><span class="p">()</span>
                        <span class="kt">Button</span><span class="p">(</span>
                            <span class="nv">action</span><span class="p">:</span> <span class="p">{</span> <span class="n">viewStore</span><span class="o">.</span><span class="nf">send</span><span class="p">(</span><span class="o">.</span><span class="n">incrementButtonTapped</span><span class="p">)</span> <span class="p">},</span>
                            <span class="nv">label</span><span class="p">:</span> <span class="p">{</span>
                                <span class="kt">Text</span><span class="p">(</span><span class="s">"+"</span><span class="p">)</span>
                                    <span class="o">.</span><span class="nf">whiteBox</span><span class="p">()</span>
                            <span class="p">}</span>
                        <span class="p">)</span>
                    <span class="p">}</span>
                    <span class="kt">Button</span><span class="p">(</span>
                        <span class="nv">action</span><span class="p">:</span> <span class="p">{</span> <span class="n">viewStore</span><span class="o">.</span><span class="nf">send</span><span class="p">(</span><span class="o">.</span><span class="n">generateRandomValueButtonTapped</span><span class="p">)</span> <span class="p">},</span>
                        <span class="nv">label</span><span class="p">:</span> <span class="p">{</span>
                            <span class="kt">Text</span><span class="p">(</span><span class="s">"Generate Random Value"</span><span class="p">)</span>
                                <span class="o">.</span><span class="nf">whiteBox</span><span class="p">()</span>
                        <span class="p">}</span>
                    <span class="p">)</span>
                    
                    <span class="kt">Spacer</span><span class="p">()</span>
                    
                    <span class="kt">Button</span><span class="p">(</span>
                        <span class="nv">action</span><span class="p">:</span> <span class="p">{</span> <span class="n">viewStore</span><span class="o">.</span><span class="nf">send</span><span class="p">(</span><span class="o">.</span><span class="n">saveButtonTapped</span><span class="p">)</span> <span class="p">},</span>
                        <span class="nv">label</span><span class="p">:</span> <span class="p">{</span>
                            <span class="kt">Text</span><span class="p">(</span><span class="s">"Add Item"</span><span class="p">)</span>
                                <span class="o">.</span><span class="nf">whiteBox</span><span class="p">()</span>
                        <span class="p">}</span>
                    <span class="p">)</span>
                <span class="p">}</span>
                <span class="o">.</span><span class="nf">padding</span><span class="p">()</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">WhiteBox</span><span class="p">:</span> <span class="kt">ViewModifier</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">body</span><span class="p">(</span><span class="nv">content</span><span class="p">:</span> <span class="kt">Content</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="n">content</span>
            <span class="o">.</span><span class="nf">foregroundColor</span><span class="p">(</span><span class="o">.</span><span class="n">black</span><span class="p">)</span>
            <span class="o">.</span><span class="nf">frame</span><span class="p">(</span><span class="nv">maxWidth</span><span class="p">:</span> <span class="o">.</span><span class="n">infinity</span><span class="p">)</span>
            <span class="o">.</span><span class="nf">padding</span><span class="p">()</span>
            <span class="o">.</span><span class="nf">background</span><span class="p">(</span><span class="kt">Color</span><span class="o">.</span><span class="n">white</span><span class="p">)</span>
            <span class="o">.</span><span class="nf">cornerRadius</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="kd">func</span> <span class="nf">whiteBox</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="nf">modifier</span><span class="p">(</span><span class="kt">WhiteBox</span><span class="p">())</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">AddItemView_Previews</span><span class="p">:</span> <span class="kt">PreviewProvider</span> <span class="p">{</span>
    <span class="kd">static</span> <span class="k">var</span> <span class="nv">previews</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">AddItemView</span><span class="p">(</span>
            <span class="nv">store</span><span class="p">:</span> <span class="o">.</span><span class="nf">init</span><span class="p">(</span>
                <span class="nv">initialState</span><span class="p">:</span> <span class="o">.</span><span class="nf">init</span><span class="p">(</span>
                    <span class="nv">item</span><span class="p">:</span> <span class="o">.</span><span class="nf">init</span><span class="p">()</span>
                <span class="p">),</span>
                <span class="nv">reducer</span><span class="p">:</span> <span class="n">addItemReducer</span><span class="p">,</span>
                <span class="nv">environment</span><span class="p">:</span> <span class="o">.</span><span class="nf">init</span><span class="p">()</span>
            <span class="p">)</span>
        <span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>En el AddItemState definimos un objeto de tipo Item</li>
  <li>Crearemos diferentes acciones que nos van a permitir crear un objeto Item como queramos. Estas acciones van a ser locales, es decir, afectan a la pantalla. Salvo guardar el objeto. Esta acción será usada en el appReducer.</li>
  <li>La navegación no se va a definir dentro de este componente.</li>
</ul>

<p>Tenemos un error en la definición del objeto Item, lo actualizaremos.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">Item</span><span class="p">:</span> <span class="kt">Identifiable</span><span class="p">,</span> <span class="kt">Equatable</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">id</span> <span class="o">=</span> <span class="kt">UUID</span><span class="p">()</span>
    <span class="k">var</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">Int</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">var</span> <span class="nv">style</span><span class="p">:</span> <span class="kt">Style</span> <span class="o">=</span> <span class="o">.</span><span class="k">none</span>
<span class="p">}</span>
</code></pre></div></div>

<p>En el AppState, añadimos una referencia nula del estado de AddItemState.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">var</span> <span class="nv">addItemState</span><span class="p">:</span> <span class="kt">AddItemState</span><span class="p">?</span>
</code></pre></div></div>

<p>Haremos lo mismo en el AppAction y en e AppReducer. Además, necesitaremos una acción más, la encargada de realizar la acción de presentar el AddItem.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">case</span> <span class="nf">addItem</span><span class="p">(</span><span class="kt">AddItemAction</span><span class="p">)</span>
<span class="k">case</span> <span class="nf">addItemSheet</span><span class="p">(</span><span class="nv">isPresented</span><span class="p">:</span> <span class="kt">Bool</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">case</span> <span class="o">.</span><span class="nv">addItem</span><span class="p">:</span>
    <span class="k">return</span> <span class="o">.</span><span class="k">none</span>

<span class="k">case</span> <span class="kd">let</span> <span class="o">.</span><span class="nf">addItemSheet</span><span class="p">(</span><span class="nv">isPresented</span><span class="p">:</span> <span class="n">isPresented</span><span class="p">):</span>
    <span class="n">state</span><span class="o">.</span><span class="n">addItemState</span> <span class="o">=</span> <span class="n">isPresented</span> <span class="p">?</span> <span class="o">.</span><span class="nf">init</span><span class="p">(</span><span class="nv">item</span><span class="p">:</span> <span class="o">.</span><span class="nf">init</span><span class="p">())</span> <span class="p">:</span> <span class="kc">nil</span>
    <span class="k">return</span> <span class="o">.</span><span class="k">none</span> 
</code></pre></div></div>
:ET