I"Ç<h2 id="m√°s-funciones">M√°s funciones</h2>

<p>Sigamos con funciones. Crea un archivo multiply.hs y agrega lo siguiente.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">multiplyMe</span> <span class="n">x</span> <span class="o">=</span> <span class="n">x</span> <span class="o">*</span> <span class="n">x</span>
</code></pre></div></div>

<p>Ahora, abre el terminal, ponte en el mismo directorio del fichero creado y ejecuta el ghci. Usa la siguiente √≥rden para cargar el archivo anterior.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">:</span><span class="n">l</span> <span class="n">multiply</span>
<span class="o">#</span> <span class="kt">Ok</span><span class="p">,</span> <span class="n">one</span> <span class="kr">module</span> <span class="err">loaded.</span>
</code></pre></div></div>
<p>Ya puedes usar la funci√≥n anterior.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">multiply</span> <span class="mi">5</span>
<span class="o">#</span> <span class="mi">25</span>
</code></pre></div></div>

<p>Podemos componer funciones.</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">divideMe</span> <span class="n">x</span> <span class="n">y</span> <span class="o">=</span> <span class="n">x</span> <span class="o">/</span> <span class="n">y</span>
</code></pre></div></div>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">multiplyMe</span> <span class="mi">5</span> <span class="o">+</span> <span class="n">divideMe</span> <span class="mi">10</span> <span class="mi">2</span>
</code></pre></div></div>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">compositionMe</span> <span class="n">x</span> <span class="n">y</span> <span class="n">z</span> <span class="o">=</span> <span class="n">multiplyMe</span> <span class="n">x</span> <span class="o">+</span> <span class="n">divideMe</span> <span class="n">y</span> <span class="n">z</span>
</code></pre></div></div>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">compositionMe</span> <span class="mi">5</span> <span class="mi">10</span> <span class="mi">2</span>
</code></pre></div></div>
<p>Podr√≠amos recurrir a condicionales if then else</p>

<div class="language-haskell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">divideIfEventMultiplyIfOdd</span> <span class="n">x</span> <span class="o">=</span> <span class="kr">if</span> <span class="n">even</span> <span class="n">x</span> <span class="kr">then</span> <span class="n">multiplyMe</span> <span class="n">x</span> <span class="kr">else</span> <span class="n">divideMe</span> <span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="mi">2</span>
</code></pre></div></div>
:ET